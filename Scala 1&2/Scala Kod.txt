import scala.annotation.tailrec
object Main {
def main(args: Array[String]): Unit = {
  println("NBD Cwiczenia 1 Scala")

  //////////////////////////////// Zadanie 1 ////////////////////////////////

  val dni_tyg: List[String] = List("poniedzialek", "wtorek", "sroda", "czwartek", "piatek", "sobota", "niedziela")

  def dni_forem(str_list: List[String]): String = {
    var ret: String = "";
    var element = "";
    for (element <- str_list) {
      ret += element + ",";
    }
    ret.substring(0, ret.length() - 1)
  }
  println("Polaczenie forem: " + dni_forem(dni_tyg))

  def dni_na_litere(str_list: List[String],litera_poczatkowa: Char): String = {
    var ret: String = "";
    var element = "";
    for (element <- str_list if element.head == litera_poczatkowa) {
      ret += element + ",";
    }
    ret.substring(0, ret.length() - 1)
  }
  println("Dni na litere 'p': " +dni_na_litere(dni_tyg, 'p'))

  def dni_whilem(str_list: List[String]): String = {
    var ret: String = "";
    var element = "";
    var i = 0;
    while (i < str_list.length) {
      ret += str_list(i) + ",";
      i += 1
    }
    ret.substring(0, ret.length() - 1)
  }
  println("Polaczenie whilem: " + dni_whilem(dni_tyg))

  //////////////////////////////// Zadanie 2 ////////////////////////////////

  def polaczenie_rekurencyjne(
                            str_list: List[String],
                            str_so_far: String = ""
                          ): String = str_list match {
    case Nil => str_so_far
    case x :: Nil =>
      (str_so_far + ',' + x).substring(1, (str_so_far + ',' + x).length())
    case x :: y :: xs => polaczenie_rekurencyjne(y :: xs, str_so_far + ',' + x)
  }
  println("Dni tygodnia rekurencyjnie: " + polaczenie_rekurencyjne(dni_tyg))
  def polaczenie_rekurencyjne_od_konca(
                                    str_list: List[String],
                                    str_so_far: String = ""
                                  ): String = str_list match {
    case Nil => str_so_far
    case x :: Nil =>
      (x + ',' + str_so_far).substring(0, (str_so_far + ',' + x).length() - 1)
    case x :: y :: xs =>
      polaczenie_rekurencyjne_od_konca(y :: xs, x + ',' + str_so_far)
  }
  println(
    "Dni tygodnia również rekurencyjnie: " + polaczenie_rekurencyjne_od_konca(dni_tyg)
  )
  //////////////////////////////// Zadanie 3 ////////////////////////////////
  @tailrec
  def polaczenie_rekurencyjne_ogonowe(
                                 str_list: List[String],
                                 result: String = ""
                               ): String = {
    if (str_list.length == 0)
      result
    else
      polaczenie_rekurencyjne_ogonowe(
        str_list.tail,
        if (result != "") result + ',' + str_list.head else str_list.head
      )
  }

  println(
    "Dni tygodnia rekurencją ogonową: " + polaczenie_rekurencyjne_ogonowe(dni_tyg)
  )

  //////////////////////////////// Zadanie 4 ////////////////////////////////

  println("Połączenie foldl: " + dni_tyg.foldLeft("") {
    (concat_string, element) =>
      if (concat_string != "") concat_string + ',' + element else element
  })

  println("Połączenie foldr : " + dni_tyg.foldRight("") {
    (concat_string, element) =>
      if (element != "") element + ',' + concat_string else concat_string
  })

  println(
    "Połączenie foldl dni na literę p : " + dni_tyg
      .filter(_.head == 'p')
      .foldLeft("") { (concat_string, element) =>
        if (concat_string != "") concat_string + ',' + element else element

      }
  )

  //////////////////////////////// Zadanie 5 ////////////////////////////////

  val produkty: Map[String, Double] =
    Map("Koszula" -> 50, "Spodnie" -> 250, "garnitur" -> 1000)
  val produkty_ze_znizka =
    produkty.view.mapValues(price => price * 0.9).toMap
  println(s"Tylko u nas! Zniżki z $produkty na $produkty_ze_znizka")

  //////////////////////////////// Zadanie 6 ////////////////////////////////

  val lista_rozne = (69, "tekst", produkty)
  def pokaz_rozne(lista_roznosci: (Any, Any, Any)) = {
    println(s"Co my tu mamy... $lista_roznosci")
  }
  pokaz_rozne(lista_rozne)

  //////////////////////////////// Zadanie 7 ////////////////////////////////

  val filmy = Map(
    "Bruce Wayne" -> "Batman",
    "Harry Potter" -> "Harry Potter",
    "Jar Jar Binks" -> "Darth Jar Jar",
  )
  def option_demo(key: Option[String]) = key match {
    case Some(s) => s
    case None    => "Był tylko jeden Matrix!"
  }
  println("Postać Neo znajduje się w trylogii... " + option_demo(filmy.get("Neo")))
  println("Prawdziwa tożsamość Jar Jar Binks'a to " + option_demo(filmy.get("Jar Jar Binks"))
  )

  //////////////////////////////// Zadanie 8 ////////////////////////////////

  var losowe_liczby = List[Int](18,82,59,81,0,96,67,0,3,97,22,81,84,54,0,35,72,31)
  def usun_zera(
                     int_list: List[Int],
                     filtered: List[Int] = List[Int]()
                   ): List[Int] =
    int_list match {
      case Nil      => filtered
      case x :: Nil => if (x != 0) x :: filtered else filtered
      case x :: y :: xs =>
        if (x != 0) usun_zera(y :: xs, x :: filtered)
        else usun_zera(y :: xs, filtered)
    }
  println("Losowe liczby bez zer rekurencyjnie:  " + usun_zera(losowe_liczby))

  //////////////////////////////// Zadanie 9 ////////////////////////////////

  def powiekszanie(nums: List[Int]) = {
    def dodajemy(num: Int): Int = {
      num + 1
    }
    nums.map(dodajemy)
  }
  println("Losowe integery powiększone o 1 to: " + powiekszanie(losowe_liczby))

  //////////////////////////////// Zadanie 10 ////////////////////////////////

   def odfiltrowanie(nums: List[Double]) = {
    nums.filter(x => x < 12 && x > -5)
  }
  println(
    "Moje losowe liczby ale z przedziału <-5,12> to:" + odfiltrowanie(losowe_liczby.map(num => num.toDouble))
  )

  //////////////////////////////// NBD ćwiczenia Scala 2 ////////////////////////////////
  //////////////////////////////// Zadanie 1 ////////////////////////////////

  def is_it_over(day: String): String = day match {
    case "poniedzialek" | "wtorek" | "sroda" | "czwartek" | "piatek"  => "Praca"
    case "sobota" | "niedziela"  => "Weekend"
    case _  => "Nie ma takiego dnia!"
  }
  println("W poniedziałek jest " + is_it_over("poniedzialek"))
  println("W sobotę jest " + is_it_over("sobota"))
  println("W kwiecień jest " + is_it_over("kwiecien"))

  //////////////////////////////// Zadanie 2 ////////////////////////////////

  class KontoBankowe(private var stanKonta: Int = 0) {
    def wplata(zmiana: Int): Unit = {
      stanKonta += zmiana
    }
    def wyplata(zmiana: Int): Unit = {
      stanKonta -= zmiana
    }
    def check(): Int = {
      stanKonta
    }
  }
  val moje_konto_bankowe = new KontoBankowe
  moje_konto_bankowe.wplata(1000000)
  moje_konto_bankowe.wyplata(200000)
  println("Po zakupie Mercedesa zostało mi jeszcze " + moje_konto_bankowe.check()+ " Dolarów.")

  //////////////////////////////// Zadanie 3 ////////////////////////////////

  case class Osoba(var imie: String, var nazwisko: String)
  val ziomek1 = new Osoba("Jacek", "Gątkowski")
  val ziomek2 = new Osoba("Artur", "Cieśliński")
  val ziomek3 = new Osoba("Don", "Corleone")
  val nieznajomy = new Osoba("???", "???")
  def greet(someone: Osoba): String = someone match {
    case Osoba("Jacek", "Gątkowski") => "Siema, jestem dalton i nie widzę kolorów."
    case Osoba("Artur", "Cieśliński") => "Dzień dobry Maestro, kawa?"
    case Osoba("Don", "Corleone")  => "Ciao Bella!"
    case _                              => "Dzień dobry!"
  }

  println(greet(ziomek1))
  println(greet(ziomek2))
  println(greet(ziomek3))
  println(greet(nieznajomy))

  //////////////////////////////// Zadanie 4 ////////////////////////////////

  def potrojne_dzialanie(wartosc_calkowita: Int, dzialanie: (Int) => Int): Int = {
    dzialanie(dzialanie(dzialanie(wartosc_calkowita)))
  }
  println(potrojne_dzialanie(3, a => a * 2))

  //////////////////////////////// Zadanie 5 ////////////////////////////////

  trait Student extends Person_2 { override def podatek = 0 }
  trait Pracownik extends Person_2 {
    var _pensja: Integer = 0
    def pensja() {
      _pensja
    }
    def pensja_=(nowa_pensja: Integer): Unit = {
      _pensja = nowa_pensja
    }
    override def podatek: Double =
      0.2 * _pensja.toDouble
  }
  trait Nauczyciel extends Pracownik {
    override def podatek = 0.1 * _pensja
  }
  abstract class Person_2(
                           val imie: String,
                           val nazwisko: String
                         ) {
    def podatek(): Double
  }
  var osoba_1 = new Person_2("Jacek", "Gatkowski") with Student
  var osoba_2 = new Person_2("Artur", "Cieśliński") with Pracownik
  var osoba_3 = new Person_2("Radosław", "Sobczyński") with Nauczyciel
  var osoba_4 = new Person_2("Adrian", "Zaforemski") with Student with Pracownik
  var osoba_5 = new Person_2("Staś", "Bielicki") with Pracownik with Student

  osoba_2.pensja = 10000
  osoba_4.pensja = 5000
  osoba_5.pensja = 4000

  def jaki_podatek(osoba: Person_2): Unit = {
    println(s"${osoba.imie} płaci podatek wysokości ${osoba.podatek} PLN.")
  }
  jaki_podatek(osoba_1)
  jaki_podatek(osoba_2)
  jaki_podatek(osoba_3)
  jaki_podatek(osoba_4)
  jaki_podatek(osoba_5)
}
}